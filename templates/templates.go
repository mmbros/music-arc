// Generated by /tmp/go-build050806585/command-line-arguments/_obj/exe/gen-templates; DO NOT EDIT
// Creation date: 2016-01-21 23:43:54.916060891 +0100 CET

package templates

import (
	"html/template"
	"io"
	"path/filepath"
)

// PageEnum type definition
type PageEnum uint8

// PageEnum constants
const (
	PageAlbum PageEnum = iota
	PageAlbumList
	PageArtist
	PageArtistsList
)

const mTemplatesFolder = "templates/music-arc"

var mTemplates [4]*template.Template

func init() {
	var templatesFiles = [...]string{"base.tmpl", "partials/artists-list.tmpl", "partials/artist.tmpl", "partials/album.tmpl", "album.tmpl", "album-list.tmpl", "artist.tmpl", "artists-list.tmpl"}
	var templatesIdxs = [...][]uint8{
		{0, 1, 2, 3, 4}, // album
		{0, 1, 2, 3, 5}, // album_list
		{0, 1, 2, 3, 6}, // artist
		{0, 1, 2, 3, 7}, // artists_list
	}

	// init base templates
	for i, idxs := range templatesIdxs {
		files := make([]string, len(idxs))
		for j, idx := range idxs {
			files[j] = templatesFiles[idx]
		}
		mTemplates[i] = template.Must(template.New(filepath.Base(files[0])).Funcs(funcMap).ParseFiles(files2paths(files)...))
	}

}

func files2paths(files []string) []string {
	var path string
	paths := make([]string, len(files))
	for i, file := range files {
		switch {
		case len(file) == 0, file[0] == '.', file[0] == filepath.Separator:
			path = file
		default:
			path = filepath.Join(mTemplatesFolder, file)
		}
		paths[i] = path
	}
	return paths
}

// Template returns the template.Template of the page
func (page PageEnum) Template() *template.Template {
	var idx = [...]uint8{0, 1, 2, 3}
	return mTemplates[idx[page]]
}

// Base returns the template name of the page
func (page PageEnum) Base() string {
	var bases = [...]string{""}
	var pi2bi = [...]uint8{0, 0, 0, 0}
	return bases[pi2bi[page]]
}

// Execute applies a parsed page template to the specified data object,
// writing the output to wr.
// If an error occurs executing the template or writing its output, execution
// stops, but partial results may already have been written to the output writer.
// A template may be executed safely in parallel.
func (page PageEnum) Execute(wr io.Writer, data interface{}) error {
	tmpl := page.Template()
	name := page.Base()
	if name == "" {
		return tmpl.Execute(wr, data)
	}
	return tmpl.ExecuteTemplate(wr, name, data)
}

/*
func main() {
  var page PageEnum
  page = PageAlbum

  wr := os.Stdout

  if err := page.Execute(wr, nil); err != nil {
	fmt.Print(err)
  }

}
*/
